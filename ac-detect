#!/bin/bash

# THE UPDATE COMMAND
tu_dup() {

  # WE WAIT 20 SECONDS BEFORE STARTING THE UPDATE SO IF THE USER RESUMES FOR SLEEP THEY HAVE TIME TO CONNECT TO WI-FI
  sleep 20
  transactional-update cleanup ${UPDATE_METHOD} reboot
  }

# DETECTION IF THE DEVICE IS A LAPTOP OR NOT
detect_device_type () {
  
  # WE DETECT WHAT KIND OF DEVICE THIS IS (Technically we don't have to detect the type of device since we check for a battery anyways but I'd rather have the check for extra accuracy.)
  echo "Detecting device type"
  CHASSIS=$(< /sys/class/dmi/id/chassis_type)
  if [[ "$CHASSIS" =~ ^(8|9|10|11)$ ]]; then
  
  # IF THE DEVICE IS A MOBILE DEVICE WE CHECK IF A BATTERY TRULY EXISTS AS SOME USERS TAKE THEM OUT
  if upower -e | grep -qE 'BAT'; then
  echo "Device has a battery"
  DEVICE_TYPE=battery
  fi
    
  # IF THE DEVICE ISN'T A BATTERY DEVICE IT GETS THE "no_battery" DEVICE TYPE  
  else 
  echo "Device doesn't have a battery"
  DEVICE_TYPE=no_battery
  fi

  # WE WRITE TO CACHE WHAT KIND OF DEVICE THIS WAS SO WE DON'T HAVE TO RE-DETECT EVERY RUN
  echo "Saving device type to cache"
  mkdir -p "$(dirname "$CACHE_FILE")"
  echo "$DEVICE_TYPE" > "$CACHE_FILE"
  
  # ONCE EVERYTHING IS READY WE JUST RUN update_logic
  update_logic
  }

# THIS JUST DETERMINES WHAT TO DO ONCE THE TYPE OF DEVICE HAS BEEN ESTABLISHED
update_logic () {

  echo "Starting updater"

  # IF DEVICE IS A "no_battery", JUST UPDATE
  if [[ "$DEVICE_TYPE" == "no_battery" ]]; then
  tu_dup

  # IF THE DEVICE HAS A BETTERY WE CHECK THE BATTERY STATE
  elif [[ "$DEVICE_TYPE" == "battery" ]]; then
  
  # WE DYNAMICALLY FIND THE BATTERY PATH THEN MEASURE IF IT'S ON AC POWER OR NOT
  BATTERY_PATH=$(upower -e | grep -E 'BAT')
  STATE=`upower -i $BATTERY_PATH | awk '/state:/ {print $2}'`
  fi
   
  # IF ITS ON AC WE UPDATE
  if [[ "$STATE" =~ ^(charging|pending-charge|fully-charged)$ ]]; then
  echo "Device is plugged in, starting update"
  tu_dup
  fi
  
  # IF AC IS UNPLUGGED WE WAIT FOR AC POWER
  if [[ "$STATE" == "discharging" ]]; then
  wait_ac
  fi
  }

# IF THE DEVICE WASN'T PLUGGED INTO AC WE WAIT FOR AC
wait_ac () {
  echo "Device is unplugged, waiting for AC power"
  while read -r line; do

  # ONCE AC IS DETECTED THE UPDATE TRIGGERS
  echo "Device is plugged in, starting update"
  tu_dup
  break
  done < <(gdbus monitor --system --dest org.freedesktop.UPower --object-path $BATTERY_PATH | grep -m1 -oE "'State': <uint32 (1|4|5)>")
  }

# WE CHECK IF CACHE EXISTS, WE READ THE DEVICE TYPE FROM IT INSTEAD OF RE-DETECTING
cache_check () {

  # WE CREATE A CACHE FILE TO REMEMBER IF THE DEVICE HAS A BATTERY OR NOT
  CACHE_FILE="/var/cache/ac-detect/ac-detect.conf"
  
  # WE CHECK THE CACHE FILE EXISTS
  if [[ -f "$CACHE_FILE" ]]; then
  echo "Detected cache file"
  DEVICE_TYPE=$(< $CACHE_FILE)
  fi
  
  # IF THE CACHE FILE HAS "battery" WE CHECK FOR A BATTERY AND RUN "update_logic"
  if [[ "$DEVICE_TYPE" == "battery" ]]; then
  
  # WE RUN A BATTERY CHECK TO SEE IF THE USER STILL HAS THE BATTERY INSIDE THEIR DEVICE AS BATTERIES CAN BE TAKEN OUT AT LATER DATES
  if upower -e | grep -qE 'BAT'; then
  echo "Detected device type"
  update_logic
  
  # IF NO BATTERY WAS FOUND WE RE-DETECT
  else
  echo "No battery found re-detecting.."
  update_logic
  fi

  # IF THE CACHE FILE HAS "no_battery" WE CHECK FOR A BATTERY AND RUN "update_logic"
  elif [[ "$DEVICE_TYPE" == "no_battery" ]]; then
  
  # IF WE DETECT A BATTERY ON A "no_battery" DEVICE WE RE-DETECT AS THE USE LIKELY PUT A BATTERY IN THEIR MOBILE DEVICE 
  if upower -e | grep -qE 'BAT'; then
  echo "Detected a new battery, re-caching.."
  detect_device_type
  
  # IF THERE ISN'T ANY BATTERY WE JUST RUN "update_logic"
  else
  echo "Detected device type"
  update_logic
  fi
  
  # IF THE CACHE FILE HAS ANYTHING BUT "battery" OR "no_battery" OR THE FILE DOESN'T EXIST, WE RE-DETECTED THE DEVICE TYPE
  else
  echo "Device type unknown starting detection..."
  detect_device_type
  fi
  }
  
cache_check
