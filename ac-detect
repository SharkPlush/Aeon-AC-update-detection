#!/bin/bash

# DETECTION IF THE DEVICE IS A LAPTOP OR NOT
detect_device_type () {
  
  # WE DETECT WHAT KIND OF DEVICE THIS IS (Technically we don't have to detect the type of device since we check for a battery anyways but I'd rather have the check for extra accuracy.)
  echo "Detecting device type"
  if [[ $(< /sys/class/dmi/id/chassis_type) =~ ^(8|9|10|11|14|31|32)$ ]]; then
  
  # IF THE DEVICE IS A MOBILE DEVICE WE CHECK IF A BATTERY TRULY EXISTS AS SOME USERS TAKE THEM OUT
  mapfile -t batteries < <(upower -e | awk '/BAT/')
  BATTERY_COUNT=${#batteries[@]}
  
  # IF ONE BATTERY GETS DETECTED THEN WE SET "DEVICE_TYPE" TO "battery"
  if [[ "$BATTERY_COUNT" -eq 1 ]]; then
  BATTERY_PATH="${batteries[0]}"
  echo "Device has a battery"
  update_logic
  
  # IF DUAL BATTERIES GETS DETECTED THEN WE SET "DEVICE_TYPE" TO "dual_battery"
  elif [[ "$BATTERY_COUNT" -eq 2 ]]; then
  BATTERY0="${batteries[0]}"
  BATTERY1="${batteries[1]}"
  echo "Device has dual batteries"
  update_logic_dual_bat

  # IF THE DEVICE IS A MOBILE DEVICE BUT WITHOUT A BATTERY WE SET "DEVICE_TYPE" TO "no_battery" 
  elif [[ "$BATTERY_COUNT" -eq 0 ]]; then
  echo "Mobile device detected without battery"
  tu_dup
  fi
    
  # IF THE DEVICE ISN'T A BATTERY DEVICE IT GETS THE "no_battery" DEVICE TYPE  
  else 
  echo "Device doesn't have a battery"
  DEVICE_TYPE="no_battery"
  tu_dup
  fi
  }

# THIS JUST DETERMINES WHAT TO DO ONCE THE TYPE OF DEVICE HAS BEEN ESTABLISHED
update_logic () {

  echo "Starting updater"
  
  # WE MEASURE IF THE BATTERY IS ON AC POWER OR NOT
  STATE=$(upower -i "$BATTERY_PATH" | awk '/state:/ {print $2}')
   
  # IF ITS ON AC WE UPDATE
  if [[ "$STATE" =~ ^(charging|pending-charge|fully-charged)$ ]]; then
  echo "Device is plugged in, starting update"
  tu_dup
  
  # IF AC IS UNPLUGGED WE WAIT FOR AC POWER
  elif [[ "$STATE" == "discharging" ]]; then
  wait_ac
  fi
  }

update_logic_dual_bat () {

  # WE MEASURE IF THE BATTERIES ARE ON AC POWER OR NOT
  STATE0=$(upower -i "$BATTERY0" | awk '/state:/ {print $2}')
  STATE1=$(upower -i "$BATTERY1" | awk '/state:/ {print $2}')
  fi
  
  if [[ "$STATE0" =~ ^(charging|fully-charged|pending-charge)$ && "$STATE1" =~ ^(empty|charging|fully-charged|pending-charge)$ ]]; then
  echo "Device is plugged in, starting update"
  tu_dup
  fi
  
  if [[ "$STATE0" =~ ^(discharging|empty)$ && "$STATE1" =~ ^(discharging|empty)$ ]]; then
  wait_ac_dual_bat
  return
  fi
  }

# IF THE DEVICE WASN'T PLUGGED INTO AC WE WAIT FOR AC
wait_ac () {
  echo "Device is unplugged, waiting for AC power"
  while read line; do
  if [[ "$line" =~ ^("'State': <uint32 1>"|"'State': <uint32 4>"|"'State': <uint32 5>")$ ]]; then

  # ONCE AC IS DETECTED THE UPDATE TRIGGERS
  echo "Device is plugged in, starting update"
  tu_dup
  break
  fi
  done < <(gdbus monitor --system --dest org.freedesktop.UPower --object-path "$BATTERY_PATH" | grep -m1 -oE "'State': <uint32 (1|4|5)>")
  }
  
wait_ac_dual_bat () {
  echo "Device is unplugged, waiting for AC power"
  while read line; do
  if [[ "$line" =~ ^("'State': <uint32 1>"|"'State': <uint32 4>"|"'State': <uint32 5>")$ ]]; then

  # ONCE AC IS DETECTED THE UPDATE TRIGGERS
  echo "Device is plugged in, starting update"
  tu_dup
  break
  fi
  done < <({
    gdbus monitor --system --dest org.freedesktop.UPower --object-path "$BATTERY0" &
    gdbus monitor --system --dest org.freedesktop.UPower --object-path "$BATTERY1"
  } | grep -m1 -oE "'State': <uint32 (1|4|5)>")
  }
  
# THE UPDATE COMMAND
tu_dup() {

  # WE WAIT 30 SECONDS BEFORE STARTING THE UPDATE SO IF THE USER RESUMES FROM SLEEP THEY HAVE TIME TO CONNECT TO WI-FI
  sleep 30
  transactional-update cleanup ${UPDATE_METHOD} reboot
  }
  
detect_device_type
